#0--应用服务配置
server.port=8081

#1--数据库配置
#数据库名称
#spring.datasource.name=lsljy
#数据库连接url
spring.datasource.url= jdbc:mysql://localhost:3306/lsljy?useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowPublicKeyRetrieval=true
#用户名
spring.datasource.username=root
#密码
spring.datasource.password=root
#数据库驱动
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


#2--druid_config数据库连接池druid的一系列配置开始>>>>>>>>>>>>>>>>>>>>>>>
#当前数据源操作类型，需要将数据员操作类型变为druid操作
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
#监控平台登录用户名
druid.login.username= root
#监控平台登录密码
druid.login.password= root
#登录白名单
druid.allow= 127.0.0.1
#登录黑名单(共同存在时，deny优先于allow)
druid.deny= root
# 初始化大小，最小，最大
druid.initial-size= 5
druid.min-idle= 5
druid.max-active= 10
# 配置获取连接等待超时的时间
druid.max-wait= 60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒，下面是：1分钟
spring.datasource.druid.time-between-eviction-runs-millis= 60000
# 配置一个连接在池中最小生存的时间，单位是毫秒，下面是：5分钟
spring.datasource.druid.min-evictable-idle-time-millis= 300000
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.pool-prepared-statements= true
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.filters=stat,wall,log4j,config
# asyncInit是1.1.4中新增加的配置，如果有initialSize数量较多时，打开会加快应用启动时间
spring.datasource.druid.asyncInit=true
#数据库连接池druid配置结束<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

#3--mybatis配置第一种方式，直接在这里配置，或者采取3--的方式，指定单独配置文件
#配置映射文件
#mybatis.mapper-locations=classpath:mapper/*.xml
#配置实体类
#mybatis.type-aliases-package=com.lsljy.model

#4--mybatis配置第二种方式，在配置文件mybatis-config.xml中配置
#properties配置文件中使用的是=号而不是：号，yml文件中才是：号
#指定mybatis的配置文件位置
mybatis.config-location=classpath:mybatis/mybatis-config.xml
#指定mybatis的mapper文件路径
mybatis.mapper-locations=classpath:mapper/*.xml


#5--配置日志级别
logging.level.com.neusoft.newsroom=INFO
logging.level.org.springframework.security=INFO
logging.level.org.hibernate=debug
logging.level.com.mypackage.domain.persistence=DEBUG

#5.1.配置 web 组的日志级别为 debug
logging.level.web=debug
#logging.level.org.springframework.web=DEBUG
#5.2.配置输出日志参数
# for servlet
#spring.mvc.log-request-details=true
# properties for reactive
#5.3配置相应的包的日志级别
logging.level.org.springframework.jdbc.core.JdbcTemplate=DEBUG
logging.level.org.springframework.jdbc.core.StatementCreatorUtils=TRACE
logging.level.org.springframework.jdbc.sqltiming=debug

#设置log的整体等级
logging.level.root=info
#分别设置不同模块的日志等级
#logging.level.com.mateng = debug

#指定文件，上面的日志级别参数会失效；不指定也会失效，因为只要logback.xml或者logback-global.xml文件存在resource下，springboot默认会读到
logging.config=classpath:logback-global.xml
#设置日志的时间戳格式
#logging.pattern.console=%black(%d{yyyy-MM-dd HH:mm:ss.SSS}) %highlight(%-5level) %yellow(%C:%L{1.}) %msg%n%throwable

## redis 配置
#redis.server.pattern=cluster
#redis.server.nodes=127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002,127.0.0.1:3003,127.0.0.1:3004,127.0.0.1:3005
#redis.server.maxIdle=8
#redis.server.minIdle=4
#redis.server.maxTotal=8
#redis.server.maxWaitMillis=6000
#redis.server.timeOut=6000

#6--redis集群配置
spring.redis.cluster.nodes=127.0.0.1:6381,127.0.0.1:6382,127.0.0.1:6383,127.0.0.1:6384,127.0.0.1:6385,127.0.0.1:6386
## 连接超时时间（毫秒）
spring.redis.timeout=60000
## Redis数据库索引(默认为0)
spring.redis.database=0

#启用redis集群连接池配置
jddods.redis.cluster=true
#配置连接池
spring.redis.lettuce.pool.max-active=100
#连接池的最大空闲连接
spring.redis.lettuce.pool.max-idle=10
#连接池的最小空闲连接
spring.redis.lettuce.pool.min-idle=5
#连接池的最大阻塞等待时间
spring.redis.lettuce.pool.max-wait=100000
spring.redis.lettuce.commandTimeout=6000




person.path=classpath:config/globalpath.yml
